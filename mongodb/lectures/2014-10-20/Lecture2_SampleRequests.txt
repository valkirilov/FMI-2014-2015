#1. Примерни данни - за да добавите тестови данни изпълнете един от двата скрипта - addRealBooksScript.js или addTestBooksScript.js . Първият добавя 10 документа с реални данни в колекцията books на базата humongous. Вторият показва как могат да се генерират тестови документи и да се добавят в колекция (в случая в колекцията testBooks) 

#пускате mongod за да стартирате демона на базата данни. Заб.: Ако базата ви не се намира на стандартното място (/data/db или C:\data\db в зависимост от ОС) трябва да укажете пътя до нея по-следния начин:  mongod --dbpath=[PATH_TO_DB_FOLDER]

>mongo
>use humongous #името на базата, която се използва в примерите
>load("[PATH_TO_SCRIPT]/addRealBooksScript.js") #изпълнявате скрипта за добавяне на истинските книги в колекцията books
>load("[PATH_TO_SCRIPT]/addTestBooksScript.js") #изпълнявате скрипта за добавяне на тестовите книги в колекцията testBooks

#2. Примери

>use books

а) find, findOne

db.books.find({},{title:1, pages:1, _id:0})

б) курсори

>use testBooks

#задаване на курсор
var cursor = db.books.find();

while (cursor.hasNext()){
	object = cursor.next();
	#манипулиране на object, например printjson(object);
}

в) сортиране, ограничаване и пропускане

#сортиране на всички книги по заглавие
db.books.find({},{title:1, pages:1, _id:0}).sort({title:1})

#намиране на всички книги от 4-тия елемент нататък, които са сортирани по заглавие
db.books.find({},{pages:1, _id:0}).sort({title:1}).skip(3)

#намиране на първите три книги сортирани по заглавие
db.books.find({},{pages:1, _id:0}).sort({title:1}).limit(3)

г) оператори за сравнение

#намира документите, за които са изпълнени и двете условия - страниците да са над 200, а бройките на книгите във Варна да е под 12
db.books.find({$and:[{pages : {$gt:300}}, {"copiesInStock.Varna": {$lte: 12}}]}, {title:1, _id:0, copiesInStock:1, pages:1})

#намира документите, за които не е вярно, че страниците на книгата са над 300
db.books.find({pages:{$not:{$gt:300}}}, {title:1, _id:0, pages:1})

#връща книгите, чиято дата на публикуване е преди 13 септември 2008. Забележете, че полето, по което се филтрира стои преди оператора за сравнение
db.books.find({publishDate:{$lt:new Date('Sep 13, 2008')}},{title:1, publishDate:1, _id:0})

#операторите за сравнения, както и други подобни оператори за ограничаване на търсените документи могат да се използват при всички CRUD заявки. В случая се ъпдейтва първият документ от колекцията, който има над 1000 страници
db.books.update({pages:{$gt:1000}}, {$set:{pages:1000}})

#изтрива всички документи, чиито автор не е Suzanne Collins
db.books.remove({author:{$ne: "Suzanne Collins"}})

д) регулярни изрази - при търсене на документи могат да се използват регулярни изрази

#намира една книга (първата добавена), която отговаря на условието в заглавието й да има символите "hunge" без значение дали са написани с малки или големи букви
db.books.findOne({title:/hunge/i})

#намира книгите, чиито издател има думата Rainbow или Reinbow
db.books.find({publisher:/R(a|e)inbow/},{publisher:1})

#намира книгите, чиито издател има буквата R, произволна поредица от символи и после "bow"
db.books.find({publisher:/R.*bow/},{publisher:1})

#изтрива книгите, които имат в заглавието си символите hunge без значение от малки или големи букви
db.books.remove({title:/hunge/i})

e) списъци find

#намира книгите, чиито автор има поне една от последователностите "tolkien" или "collins" без значение от малки или големи букви
db.books.find({author:{$in:[/tolkien/i, /collins/i]}}, {title:1,_id:0,auhtor:1})

#намира книгите, които имат поне един от двата посочени тага. Ако документът има един таг, то той се сравнява с посочените тагове. Ако документът има списъци от тагове, то документът ще отговаря на условието, ако поне един от таговете в списъка е сред посочените
db.books.find({tags:{$in:["programming", "adventure"]}},{title:1, tags:1, _id:0})

ж) misc

#намиране на документи чрез условие зададено с JavaScript
db.books.find({$where: "this.pages % 17 === 0"},{title:1, pages:1})

#намиране на броя на книгите, чиито страници са повече от 300
db.books.count({pages:{$gt:300}})

з) update списъци

#махане на полето author от първия документ, който отговаря на условието
db.books.update({title:/hung/i},{$unset:{author:""}})

#добавя тага cool към списъка tags на документа, който отговаря на зададеното условие
db.books.update({title:"The Hunger Games"},{$push:{tags:"cool"}})

#маха последния елемент от списъка tags на документа, който отговаря на зададеното условие
db.books.update({title:"The Hunger Games"},{$pop:{tags:1}})